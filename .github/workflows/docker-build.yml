name: Build and Test Server Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

defaults:
  run:
    shell: bash

jobs:

  build-and-run:
    name: Build and Run Server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Variables
        id: variables
        run: |
          echo "::set-output name=datetime::$(date +%Y%m%dT%H%M%SZ)"
          echo "::set-output name=userid::$(id -u)"
          echo "::set-output name=groupid::$(id -g)"

      - name: Set Permissions on Executable Scripts
        run: |
          chmod +x src/install_server.scmd
          chmod +x src/run_server.sh

      - name: Make Directories
        run: mkdir ArkSE_Install ArkSE_Config

      - name: Build the Docker Image
        if: ${{ success() }}
        run: |
          docker build \
          --file docker/ark-se-dedicated-server.Dockerfile \
          --tag renegademaster/ark-se-dedicated-server:${{ steps.variables.outputs.datetime }} \
          --build-arg USER_ID=${{ steps.variables.outputs.userid }} \
          --build-arg GROUP_ID=${{ steps.variables.outputs.groupid }} \
          .

      - name: Test Run the Docker Image
        if: ${{ success() }}
        continue-on-error: true
        timeout-minutes: 5
        run: |
          docker run \
          --rm \
          --name ark-se-server \
          --user ${{ steps.variables.outputs.userid }}:${{ steps.variables.outputs.groupid }} \
          --mount type=bind,source="$(pwd)/ArkSE_Install",target=/home/steam/ArkSE_Install \
          --mount type=bind,source="$(pwd)/ArkSE_Config",target=/home/steam/ArkSE_Config \
          --env=GAME_PORT="25496" \
          --env=MAX_PLAYERS="14" \
          --env=MAX_RAM="6144m" \
          --env=PUBLIC_SERVER="false" \
          --env=SERVER_NAME="GitHubActionTest" \
          --env=SERVER_PASSWORD="github_action_test_password" \
          ark-se-dedicated-server:${{ steps.variables.outputs.datetime }} \
          2>&1 | tee ./docker-log.log

      - name: Investigate File Structure on Failure
        if: ${{ failure() }}
        run: |
          pwd
          echo ''
          ls -lAuhFn ./ArkSE_Install/
          echo ''
          ls -lAuhFn ./ArkSE_Config/
          echo ''
          tree -aL 4 ./ArkSE_Install/
          echo ''
          tree -aL 4 ./ArkSE_Config/

      - name: Upload Docker Logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: docker-logs
          path: |
            docker-log.log

      - name: Upload Server Configuration
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: server-configs
          path: |
            ArkSE_Config/Server/GitHubActionTest.ini
            ArkSE_Config/Server/GitHubActionTest_SandboxVars.lua
            ArkSE_Install/ProjectZomboid64.json

  test:
    name: Test Server
    runs-on: ubuntu-latest
    needs:
      - build-and-run
    steps:
      - name: Download Docker Logs
        uses: actions/download-artifact@v2
        with:
          name: docker-logs

      - name: Download Server Configs
        uses: actions/download-artifact@v2
        with:
          name: server-configs

      - name: Test - Server Started
        run: |
          check_for_config() {
            if ! grep -q -iE "$1" "./docker-log.log"; then
              printf "Could not find %s in %s\n" "$1" "./docker-log.log"
              exit 1
            else
              printf "Found %s in %s\n" "$1" "./docker-log.log"
            fi
          }
          
          check_for_config "LuaNet: Initialization \[DONE\]"

      - name: Test - Sed Command Completed
        run: |
          check_for_config() {
            if ! grep -q -iE "$1" "./docker-log.log"; then
              printf "Could not find %s in %s\n" "$1" "./docker-log.log"
            else
              printf "Found %s in %s\n" "$1" "./docker-log.log"
              exit 1
            fi
          }
          
          check_for_config "sed: can't read"

      - name: Test - Server JVM Configuration Applied
        run: |
          check_for_config() {
            if ! grep -q -iE "$1" "./ArkSE_Install/ProjectZomboid64.json"; then
              printf "Could not find %s in %s\n" "$1" "./ArkSE_Install/ProjectZomboid64.json"
              exit 1
            else
              printf "Found %s in %s\n" "$1" "./ArkSE_Install/ProjectZomboid64.json"
            fi
          }
          
          check_for_config "\-Xmx6144m"

      - name: Test - Server Configuration Applied
        run: |
          check_for_config() {
            if ! grep -q -iE "$1" "./ArkSE_Config/Server/GitHubActionTest.ini"; then
              printf "Could not find %s in %s\n" "$1" "./ArkSE_Config/Server/GitHubActionTest.ini"
              exit 1
            else
              printf "Found %s in %s\n" "$1" "./ArkSE_Config/Server/GitHubActionTest.ini"
            fi
          }

          check_for_config "SaveWorldEveryMinutes=16"
          check_for_config "SteamPort1=25496"
          check_for_config "MaxPlayers=14"
          check_for_config "PauseEmpty=true"
          check_for_config "Open=false"
          check_for_config "PublicName=GitHubActionTest"
          check_for_config "Password=github_action_test_password"
